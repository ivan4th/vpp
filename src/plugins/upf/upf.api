/* Define a simple enable-disable binary API to control the feature */

autoreply define upf_enable_disable {
    u32 client_index;
    u32 context;
    u32 sw_if_index;
    u8 enable;
    option vat_help = "{ <intfc> | sw_if_index <nn> } [disable]";
};

/** \brief Add/delete TDF application
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param name - TDF application name
    @param flags - TBD
    @param is_add - 1 for add, 0 for remove
*/
autoreply define upf_app_add_del {
  u32 client_index;
  u32 context;
  u8 name[64];
  u32 flags;
  u8 is_add;
};

/** \brief Add/delete TDF application IP rule
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param app - TDF application name
    @param id - Rule identifier
    @param is_ipv6 - 1 for IPv6, 0 for IPv4
    @param src_ip_addr - IP source address
    @param src_ip_prefix_len - Prefix length for IP source address
    @param dst_ip_addr - IP destination address
    @param dst_ip_prefix_len - Prefix length for IP destination address
    @param is_add - 1 for add, 0 for remove
*/
autoreply define upf_app_ip_rule_add_del {
  u32 client_index;
  u32 context;
  u8 app[64];
  u32 id;
  u8 is_ipv6;
  u8 src_ip_addr[16];
  u8 src_ip_prefix_len;
  u8 dst_ip_addr[16];
  u8 dst_ip_prefix_len;
  u8 is_add;
};

/** \brief Add/delete TDF application Layer 7 rule
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param app - TDF application name
    @param id - Rule identifier
    @param regex - Layer 7 detection regular expression
    @param is_add - 1 for add, 0 for remove
*/
autoreply define upf_app_l7_rule_add_del {
  u32 client_index;
  u32 context;
  u8 app[64];
  u32 id;
  u8 regex[1024];
  u8 is_add;
};

/** \brief Add/delete TDF application Layer 7 rule
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param type
    @param default_value
*/
autoreply define upf_app_flow_timeout_set {
  u32 client_index;
  u32 context;
  u8 type;
  u16 default_value;
};

/* TODO: use this struct for adding and dumping the rules */
typedef upf_l7_rule
{
  u32 id;
  u32 regex_length;
  u8 regex[regex_length];
};

autoreply define upf_update_app {
  u32 client_index;
  u32 context;

  u8 app[64];
  u32 l7_rule_count;
  vl_api_upf_l7_rule_t l7_rules[l7_rule_count];
};

/*
  NOTE: details must go before corresponding _dump,
  or we'll be gettings errors like:

  vl_socket_api_send:133: id out of range: 1301
*/

define upf_applications_details {
  u32 context;

  u8 name[64];
  u32 flags;
};

define upf_applications_dump {
  u32 client_index;
  u32 context;
};

/* TODO: ip rules aren't implemented yet */
/*
define upf_application_ip_rule_details {
  u32 context;
  u32 id;

  u8 is_ipv6;
  u8 src_ip_addr[16];
  u8 src_ip_prefix_len;
  u8 dst_ip_addr[16];
  u8 dst_ip_prefix_len;
};

define upf_application_ip_rule_dump {
  u32 client_index;
  u32 context;

  u8 app[64];
};
*/

define upf_application_l7_rule_details {
  u32 context;

  u32 id;
  u8 regex[1024];
};

define upf_application_l7_rule_dump {
  u32 client_index;
  u32 context;

  u8 app[64];
};
